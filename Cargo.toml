[workspace]
resolver = "2"
members = [
  "client/trailbase-rs",
  "docs/examples/record_api_rs",
  "examples/custom-binary",
  "trailbase-apalis",
  "trailbase-assets",
  "trailbase-build",
  "trailbase-cli",
  "trailbase-core",
  "trailbase-extension",
  "trailbase-js",
  "trailbase-qs",
  "trailbase-schema",
  "trailbase-sqlite",
  "vendor/serde_rusqlite",
  "vendor/sqlean",
]
default-members = [
  "client/trailbase-rs",
  "trailbase-assets",
  "trailbase-build",
  "trailbase-cli",
  "trailbase-core",
  "trailbase-extension",
  "trailbase-js",
  "trailbase-qs",
  "trailbase-schema",
  "trailbase-sqlite",
]
exclude = [
  "vendor/refinery",
  "vendor/rustc_tools_util",
]

# https://doc.rust-lang.org/cargo/reference/profiles.html
[profile.release]
panic = "unwind"
opt-level = 3
# LTO is fun. A few observations:
# * PGO doesn't work with LTO: https://github.com/llvm/llvm-project/issues/57501
# * Cranelift doesn't work with LTO: missing symbols during linking.
# * Setting `lto` to true or "fat" has a significant impact on build times
#   manifesting as `LLVM_passes` and `finish_ongoing_codegen` in the build
#   timings. Also increasing the `codegen-units` doesn't seem to have an effect
#   in "fat"-mode.
# * In TB benchmarks "fat" did not perform better than "thin" LTO.
# * However, both "fat" LTO and "codegen-units = 1" reduced binary size. We're
#   still using it in github releases.
lto = "thin" # ("off", "thin", "fat")
codegen-units = 16
strip = "debuginfo" # ("symbols", "debuginfo", "none")

# Workaround for https://github.com/gwenn/lemon-rs/issues/78. sqlite3-parser
# requires 1+MB stack frames to parse trivial SQL statements, which is larger
# than Window's default stack size of 1MB. This is due to the rust compiler not
# overlapping stack variables of disjoint branches in dev mode and instead
# allocating them all.
[profile.dev.package.sqlite3-parser]
opt-level = 1

[workspace.dependencies]
askama = { version = "0.14.0", default-features = false, features = ["derive", "std", "config"] }
axum = { version = "^0.8.1", features = ["multipart"] }
env_logger = { version = "^0.11.8", default-features = false, features = ["auto-color", "humantime"] }
libsqlite3-sys = { version = "0.34.0", features = ["bundled"] }
rusqlite = { version = "0.36.0", default-features = false, features = ["bundled", "column_decltype", "load_extension", "modern_sqlite", "functions", "limits", "backup", "hooks", "preupdate_hook"] }
rust-embed = { version = "8.4.0", default-features = false, features = ["mime-guess"] }
serde_rusqlite = { path = "vendor/serde_rusqlite" }
tokio = { version = "^1.38.0", features = ["macros", "rt-multi-thread", "fs", "signal", "time", "sync"] }
tracing = { version = "0.1.40", default-features = false }
tracing-subscriber = { version = "0.3.18", default-features = false, features = ["smallvec", "std", "fmt", "json"] }
trailbase-apalis = { path = "trailbase-apalis", version = "0.1.0" }
trailbase-build = { path = "trailbase-build", version = "0.1.0" }
trailbase-assets = { path = "trailbase-assets", version = "0.1.0" }
trailbase-sqlean = { path = "vendor/sqlean", version = "0.0.2" }
trailbase-extension = { path = "trailbase-extension", version = "0.2.0" }
trailbase-js = { path = "trailbase-js", version = "0.1.0" }
trailbase-qs = { path = "trailbase-qs", version = "0.1.0" }
trailbase-refinery-core = { path = "vendor/refinery/refinery_core", version = "0.8.16", default-features = false, features = ["rusqlite-bundled"] }
trailbase-refinery-macros = { path = "vendor/refinery/refinery_macros", version = "0.8.15" }
trailbase-schema = { path = "trailbase-schema", version = "0.1.0" }
trailbase-sqlite = { path = "trailbase-sqlite", version = "0.2.0" }
trailbase = { path = "trailbase-core", version = "0.1.0" }
uuid = { version = "1", default-features = false, features = ["std", "v4", "v7", "serde"] }
